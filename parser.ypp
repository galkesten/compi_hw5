%{
	#include <iostream>
	#include "semanticAnalyzer.h"
	#include "codeGen.hpp"
	#include "hw3_output.hpp"
	using namespace output;
	void yyerror(const char*);
	int yylex();
	extern int yylineno;
%}

%token VOID INT BYTE B BOOL TRUE FALSE RETURN WHILE BREAK CONTINUE SWITCH CASE DEFAULT COLON SC COMMA LBRACE RBRACE ASSIGN ID NUM STRING EOP
%right IF
%right ELSE
%left OR
%left AND
%left EQUALITY
%nonassoc RELATIONAL
%left ADD SUB
%left MULT DIV
%right NOT
%left LPAREN RPAREN

%%
Program : {openNewScope(GLOBAL_BLOCK);} Funcs EOP {closeGlobalScope();  addPrintFunctionsToGlobalScope(); printCode(); }
;
Funcs : {}
		| FuncDecl Funcs {}
;
FuncDecl :RetType ID LPAREN Formals RPAREN LBRACE {openNewScope(FUNC_BLOCK, $2.stringVal, $1.type, $4
                  .variablesTypes,
                  $4.variablesValues); genFuncDefenition( $2.stringVal);} Statements
                  RBRACE{closeScope(); genCloseFunc($1.type);}
;
RetType : Type {$$.type = $1.type;}
		| VOID {$$.type = "VOID";}
;
Formals : {}
		| FormalsList {}
;
FormalsList : FormalDecl {$$.variablesTypes = $1.variablesTypes; $$.variablesValues = $1.variablesValues;}
			| FormalDecl COMMA FormalsList {$$.variablesTypes=$1.variablesTypes;
			$$.variablesTypes.insert($$.variablesTypes.end(), $3.variablesTypes
			.begin(), $3.variablesTypes.end());
			$$.variablesValues=$1.variablesValues;
			$$.variablesValues.insert($$.variablesValues.end(), $3
			.variablesValues.begin(), $3.variablesValues.end());}
;
FormalDecl : Type ID {$$.variablesTypes = {$1.type}; $$.variablesValues = {$2.stringVal};}
;
Statements : Statement {$$= $1; createNextLabelAndBpatchNextList($$);}
			| Statements Statement {mergeNextLists($$, $1, $2);
			createNextLabelAndBpatchNextList($$);}
;
M : {genMarker($$);}
;
N: {genBrForNextList($$);}

Statement : LBRACE {openNewScope(BLOCK);} Statements RBRACE {closeScope();}
			| Type ID SC {addNewVar($2.stringVal, $1.type); genVarStore($2.stringVal,$2, true);}
			| Type ID ASSIGN Exp SC {checkAssignType($1.type, $4.type); addNewVar($2.stringVal, $1.type);
			genVarStore($2.stringVal,$4);}
			| ID ASSIGN Exp SC {checkIfVarDeclared($1.stringVal);
			            checkAssignType(getSymbolType($1.stringVal), $3.type);
			            genVarStore($1.stringVal,$3);}
			| Call SC {}
			| RETURN SC { checkVoidFunc();  genVoidReturn();}
			| RETURN Exp SC {checkRetType($2.type); genIntReturn($2);}
			| IF LPAREN IfExpType RPAREN M Statement closeIfMarker %prec IF
			{genIfNoElse($$, $3, $5); mergeNextLists($$,$$, $6); }
			| IF LPAREN IfExpType RPAREN M Statement closeIfMarker ELSE N
			{openNewScope(ELSE_BLOCK);} M Statement %prec ELSE {closeScope();
			genIfElse($$, $3, $5, $11, $9); mergeNextLists($$,$$, $6), mergeNextLists($$,$$, $12);}
			| WHILE LPAREN {genLabelForWhileOrSwitch(true);} Exp {checkBoolType($4.type, $4.type);}
			RPAREN  {openNewScope(WHILE_BLOCK);} M Statement { closeScope(); genWhile($$, $4, $8, $9);}
			| BREAK SC {checkBreak(); genBreak();}
			| CONTINUE SC {checkContinue(); genContinue();}
			| SWITCH LPAREN {genLabelForWhileOrSwitch(false);} Exp {checkNumericType($4.type, $4
			.type); openNewScope(SWITCH_BLOCK); genBrToCaseList();}  RPAREN
			LBRACE CaseList RBRACE {closeScope(); genSwitch($$,$4,$8 );}

;
IfExpType : Exp {checkBoolType($1.type, $1.type); openNewScope(IF_BLOCK); $$ = $1; }
closeIfMarker : { closeScope();}


Call : ID LPAREN ExpList RPAREN {checkFuncCall($1.stringVal, $3.variablesTypes);
                                 $$.type = getSymbolType($1.stringVal);
                                 $$.place = genFuncCall($3, $1.stringVal);}
		|ID LPAREN RPAREN {checkFuncCall($1.stringVal);
                           $$.type = getSymbolType($1.stringVal);
                            $$.place = genEmptyFuncCall($1.stringVal);}
;
ExpList : Exp {genBoolValForFuncArg($1); $$.variablesTypes = {$1.type};
                $$.variablesPlaces = {$1.place};}
		| Exp COMMA {genBoolValForFuncArg($1);} ExpList {$$.variablesTypes = {$1.type};
		                     $$.variablesTypes.insert($$.variablesTypes.end(),
		                     $4.variablesTypes.begin(), $4.variablesTypes.end());
		                     $$.variablesPlaces = {$1.place};
                             $$.variablesPlaces.insert($$.variablesPlaces.end(),
                             $4.variablesPlaces.begin(), $4.variablesPlaces.end());}
;
Type : INT {$$.type = "INT";}
		| BYTE {$$.type = "BYTE";}
		| BOOL {$$.type = "BOOL";}
;
Exp : LPAREN Exp RPAREN {$$.type = $2.type; $$ = $2;}
	| Exp ADD Exp {$$.type = checkNumericType($1.type, $3.type); genBinopInstruction($$, $1, $3,"add");}
	| Exp SUB Exp {$$.type = checkNumericType($1.type, $3.type); genBinopInstruction($$, $1, $3, "sub");}
	| Exp MULT Exp {$$.type = checkNumericType($1.type, $3.type); genBinopInstruction($$, $1, $3, "mul");}
	| Exp DIV Exp {$$.type = checkNumericType($1.type, $3.type); genBinopInstruction($$, $1, $3, "sdiv");}
	| ID {checkIfVarDeclared($1.stringVal);
	      $$.type = getSymbolType($1.stringVal); genLoad($$, $1);}
	| Call {$$.type = $1.type; $$.place = $1.place; genBoolRetType($$);}
	| NUM {$$.type = "INT";
	        $$.intVal = $1.intVal; genInt($$);}
	| NUM B {checkByte($1.intVal);
	         $$.byteVal = $1.intVal;
	         $$.type = "BYTE"; genByte($$);}
	| STRING {$$.type = "STRING"; $$.stringVal = $1.stringVal; genString($$);}
	| TRUE {$$.type = "BOOL"; genBool($$, true);}
	| FALSE {$$.type = "BOOL"; genBool($$, false);}
	| NOT Exp {$$.type = checkBoolType($2.type, $2.type); genNotBool($$, $2);}
	| Exp AND M Exp {$$.type = checkBoolType($1.type, $4.type);genBoolAnd($$, $1, $3, $4);}
	| Exp OR M Exp {$$.type = checkBoolType($1.type, $4.type);genBoolOr($$, $1, $3, $4);}
	| Exp RELATIONAL Exp {checkNumericType($1.type, $3.type);
	                      $$.type = "BOOL"; genRelational($$, $1, $2.stringVal, $3);}
	| Exp EQUALITY Exp {checkNumericType($1.type, $3.type);
                        $$.type = "BOOL"; genRelational($$, $1, $2.stringVal, $3);}

;
CaseList : CaseDecl CaseList {mergeNextLists($$,$1,$2);}
		| CaseDecl {mergeNextLists($$,$$,$1);}
		| DEFAULT COLON {genNewCase($1, true);} Statements {mergeNextLists
		($$,$$,$4);}
;		
CaseDecl : CASE NUM COLON {genNewCase($2, false);} Statements
 {mergeNextLists($$,$$,$5); }
;

%%

void yyerror(const char*){
	output::errorSyn(yylineno);
}

int main(){
	return yyparse();
}
